#include "24LC01-RK.h"

// Low-level test of 24LC01 I2C EEPROM driver

SYSTEM_THREAD(ENABLED);
SYSTEM_MODE(MANUAL);

SerialLogHandler logHandler(LOG_LEVEL_TRACE);

// This is more data than we need for the 24LC01. It's 128 bytes, and this is 1024 bytes of random data.
static const uint8_t randomData[] = {
		0xa7, 0xf1, 0xd9, 0x2a, 0x82, 0xc8, 0xd8, 0xfe, 0x43, 0x4d, 0x98, 0x55, 0x8c, 0xe2, 0xb3, 0x47, 0x17, 0x11, 0x98, 0x54, 0x2f, 0x11, 0x2d, 0x05, 0x58, 0xf5, 0x6b, 0xd6, 0x88, 0x07, 0x99, 0x92,
		0x48, 0x33, 0x62, 0x41, 0xf3, 0x0d, 0x23, 0xe5, 0x5f, 0x30, 0xd1, 0xc8, 0xed, 0x61, 0x0c, 0x4b, 0x02, 0x35, 0x39, 0x81, 0x84, 0xb8, 0x14, 0xa2, 0x9c, 0xb4, 0x5a, 0x67, 0x2a, 0xca, 0xe5, 0x48,
		0xe9, 0xc5, 0xf1, 0xb0, 0xc4, 0x15, 0x8a, 0xe5, 0x9b, 0x4d, 0x39, 0xf6, 0xf7, 0xe8, 0xa1, 0x05, 0xd3, 0xfe, 0xed, 0xa5, 0xd5, 0xf3, 0xd9, 0xe4, 0x5b, 0xfa, 0x6c, 0xc3, 0x51, 0xe2, 0x20, 0xae,
		0x0c, 0xe1, 0x06, 0x98, 0x6d, 0x61, 0xff, 0x34, 0xa1, 0x1e, 0x19, 0xfd, 0x36, 0x50, 0xe9, 0xb7, 0x81, 0x8f, 0xc3, 0x3a, 0x1e, 0x0f, 0xc0, 0x2c, 0x44, 0x55, 0x7a, 0xc8, 0xab, 0x50, 0xc9, 0xb2,
		0xde, 0xb2, 0xf6, 0xb5, 0xe2, 0x4c, 0x4f, 0xdd, 0x9f, 0x88, 0x67, 0xbd, 0xce, 0x1f, 0xf2, 0x61, 0x00, 0x8e, 0x78, 0x97, 0x97, 0x0e, 0x34, 0x62, 0x07, 0xd7, 0x5e, 0x47, 0xa1, 0x58, 0x29, 0x8e,
		0x5b, 0xa2, 0xf5, 0x62, 0x46, 0x86, 0x9c, 0xc4, 0x2e, 0x36, 0x2a, 0x02, 0x73, 0x12, 0x64, 0xe6, 0x06, 0x87, 0xef, 0x53, 0x09, 0xd1, 0x08, 0x53, 0x4f, 0x51, 0xf8, 0x65, 0x8f, 0xb4, 0xf0, 0x80,
		0xb7, 0xcb, 0x19, 0xee, 0x9a, 0xeb, 0xd7, 0x18, 0xcc, 0x4f, 0xa2, 0x7c, 0x8c, 0x37, 0xdf, 0xc1, 0xad, 0xa5, 0xd1, 0x33, 0xd1, 0x3a, 0xbe, 0x03, 0xf0, 0x21, 0xe9, 0xb1, 0xb7, 0x8c, 0xcb, 0xd8,
		0x2f, 0x7f, 0xf2, 0xb3, 0x8c, 0x6d, 0x48, 0xd0, 0x1e, 0x48, 0x1b, 0x2d, 0x4f, 0xaf, 0x71, 0x71, 0x80, 0x5f, 0xd7, 0xf2, 0xd3, 0x9e, 0xf4, 0xc4, 0xf1, 0x9b, 0x94, 0x96, 0xe8, 0x1d, 0xab, 0x81,
		0x93, 0xb3, 0x73, 0x7e, 0x1b, 0x27, 0xd9, 0xc4, 0x39, 0x57, 0x16, 0x64, 0x41, 0xb9, 0x35, 0x15, 0xe8, 0xf0, 0x3c, 0x95, 0xd8, 0xe8, 0xce, 0x1e, 0x18, 0x64, 0xfa, 0xad, 0x68, 0xdd, 0xfc, 0x59,
		0x32, 0x13, 0x01, 0x09, 0x39, 0x0b, 0x0f, 0x1f, 0xe5, 0xca, 0x71, 0x68, 0x05, 0xf8, 0x36, 0x2e, 0x98, 0xdc, 0xca, 0xad, 0xc8, 0x6a, 0xdb, 0xed, 0x25, 0x80, 0x1a, 0x9a, 0x9d, 0xcf, 0xa6, 0x26,
		0x43, 0x19, 0xdd, 0xaf, 0xe8, 0x3a, 0x89, 0xc5, 0x1f, 0x3c, 0x6d, 0x19, 0x9d, 0x38, 0xde, 0x10, 0xe6, 0x60, 0xc3, 0x7b, 0xe8, 0x72, 0xc3, 0xf2, 0xb3, 0x16, 0x60, 0xde, 0x8b, 0xc9, 0x59, 0x02,
		0xb9, 0x10, 0x32, 0x62, 0xcd, 0xb9, 0x41, 0xf7, 0x73, 0x76, 0xf5, 0xd3, 0xdb, 0xb7, 0xa3, 0xd5, 0xa3, 0x87, 0x79, 0x7f, 0xc4, 0x81, 0x9a, 0x03, 0x5e, 0xca, 0x70, 0x4c, 0xed, 0xb3, 0x71, 0x10,
		0xee, 0x7f, 0x20, 0x6b, 0x0c, 0x88, 0x05, 0xaa, 0xeb, 0xf4, 0x96, 0x3e, 0x7c, 0x47, 0x08, 0xce, 0x8d, 0x4e, 0x09, 0x23, 0x66, 0xe7, 0x17, 0x92, 0xa8, 0xa3, 0xb2, 0xbb, 0xcd, 0xee, 0x32, 0x1b,
		0x3e, 0x15, 0x38, 0x0c, 0x54, 0x1e, 0xf0, 0x93, 0x08, 0x88, 0x96, 0x9f, 0x74, 0x57, 0xaf, 0xe1, 0x85, 0x88, 0x82, 0x6a, 0x41, 0x9d, 0x58, 0x31, 0x1c, 0x17, 0x84, 0xb5, 0x48, 0x4e, 0xec, 0xdb,
		0x39, 0x3f, 0x6a, 0x0a, 0xca, 0x11, 0xb9, 0x1d, 0xf0, 0x86, 0x6b, 0x50, 0x0b, 0x8d, 0xee, 0x50, 0x1f, 0xd7, 0xeb, 0x9b, 0xce, 0x09, 0xa1, 0x7d, 0x74, 0x12, 0x4b, 0x46, 0x05, 0xad, 0xfc, 0x07,
		0x77, 0xbe, 0xd9, 0x81, 0x6d, 0x8d, 0x7e, 0x84, 0x88, 0x54, 0x4a, 0x18, 0xd8, 0x04, 0x5c, 0xb3, 0x28, 0x3b, 0x0a, 0x75, 0x2b, 0x88, 0x1b, 0x5f, 0x50, 0x0f, 0xad, 0xb5, 0x90, 0x10, 0xe6, 0x3d,
		0x1b, 0x66, 0x4f, 0x8b, 0xda, 0x2d, 0xbf, 0x33, 0xcb, 0x6b, 0xe2, 0x1c, 0x8e, 0xb3, 0xec, 0xa9, 0xd9, 0xd5, 0xbf, 0x14, 0x4c, 0x08, 0xe9, 0x57, 0x7e, 0xd0, 0xd1, 0xe5, 0xe5, 0x60, 0x87, 0x51,
		0x09, 0xb3, 0x40, 0x98, 0x05, 0x80, 0x47, 0x3d, 0xbc, 0x2e, 0x68, 0x9a, 0x3b, 0xe8, 0x38, 0xe7, 0x7a, 0x0a, 0x33, 0x48, 0xfe, 0x96, 0x0e, 0xc9, 0xbf, 0x81, 0xda, 0x36, 0xf1, 0x86, 0x8c, 0xa5,
		0xd2, 0x47, 0x88, 0xfa, 0x4c, 0x0c, 0x77, 0x8b, 0xf0, 0xd1, 0x23, 0x14, 0x28, 0x54, 0x95, 0x63, 0x65, 0x16, 0xcf, 0x40, 0x86, 0x1b, 0x3d, 0x73, 0x7f, 0xd3, 0x5d, 0xbb, 0x59, 0x1c, 0x5b, 0x5d,
		0x25, 0x91, 0x6e, 0xb1, 0xd8, 0x61, 0x76, 0xb1, 0x4e, 0x0e, 0x67, 0xd2, 0xd0, 0x39, 0x57, 0xf0, 0xcf, 0x6c, 0x87, 0x83, 0x4b, 0xf3, 0x28, 0x54, 0x05, 0x88, 0x36, 0x0b, 0xa7, 0xc7, 0xc5, 0xf8,
		0x85, 0x41, 0x63, 0x4f, 0xb7, 0xba, 0xde, 0x5f, 0x94, 0xff, 0x67, 0x1d, 0x1f, 0xeb, 0xdc, 0xbd, 0xa1, 0x16, 0xd2, 0xda, 0x77, 0x90, 0x38, 0xed, 0x76, 0x79, 0x89, 0x6c, 0x29, 0x19, 0x8b, 0x26,
		0x57, 0xb5, 0x8c, 0x50, 0xea, 0x05, 0x4f, 0x64, 0x4f, 0x41, 0x29, 0xc8, 0xba, 0x8d, 0x8d, 0x54, 0x4b, 0x72, 0x76, 0x33, 0xdd, 0x40, 0x75, 0x43, 0x98, 0x04, 0x67, 0x96, 0xe0, 0x38, 0x62, 0x6f,
		0xef, 0x92, 0x37, 0xce, 0x5b, 0x61, 0x5b, 0xc0, 0x86, 0x77, 0xee, 0x5a, 0xbf, 0xbd, 0x85, 0xf7, 0x3f, 0x7f, 0x88, 0x68, 0xcb, 0x1b, 0x5f, 0xba, 0x4c, 0x13, 0x09, 0xf1, 0x60, 0x61, 0xaa, 0x13,
		0x38, 0x21, 0xfb, 0xe2, 0xa7, 0x58, 0xd2, 0xbb, 0xe6, 0xaa, 0x04, 0x0a, 0x94, 0x0d, 0x41, 0xb7, 0xd3, 0xb8, 0x69, 0xce, 0xe9, 0x45, 0x15, 0x0a, 0xa4, 0xa4, 0x0e, 0x6f, 0xf7, 0x19, 0xee, 0xc2,
		0x4b, 0x26, 0x81, 0xcd, 0x5c, 0xe0, 0x6b, 0x50, 0x27, 0x34, 0x36, 0x58, 0x40, 0x66, 0x04, 0x66, 0x56, 0xd5, 0xef, 0xed, 0x73, 0x15, 0x75, 0x91, 0x89, 0xd6, 0x88, 0x15, 0xdd, 0xb9, 0xe5, 0xf8,
		0xd7, 0xfd, 0x53, 0xb6, 0xec, 0x09, 0x66, 0x16, 0xa7, 0x73, 0xb9, 0x42, 0x1f, 0x67, 0x04, 0xce, 0xd3, 0x6e, 0xf4, 0xe4, 0x84, 0xba, 0x0c, 0x6c, 0x5a, 0x48, 0x55, 0xc7, 0x1c, 0x33, 0xa5, 0x4a,
		0xc8, 0x2b, 0xe8, 0x03, 0xe5, 0xcf, 0xd1, 0x75, 0x77, 0x9f, 0xc4, 0x44, 0xb7, 0xe6, 0xaa, 0x90, 0x01, 0xee, 0xfa, 0xbe, 0xbc, 0x0c, 0xf9, 0x97, 0x54, 0x88, 0x7c, 0x7b, 0x0a, 0x27, 0xaf, 0xdd,
		0xc4, 0x15, 0xf8, 0xa0, 0x2c, 0x5a, 0xf1, 0xef, 0xea, 0x26, 0xad, 0x1e, 0x5d, 0x92, 0xb1, 0xe2, 0x9a, 0x8f, 0xaf, 0x5b, 0x21, 0x86, 0xc3, 0x09, 0x4f, 0x4a, 0x13, 0x7b, 0xcf, 0xaa, 0x65, 0xd7,
		0xb2, 0x74, 0x21, 0x4d, 0xb6, 0x4c, 0x86, 0xf3, 0x08, 0x5b, 0x24, 0x93, 0x8e, 0x18, 0x32, 0xfb, 0x31, 0x0a, 0x6f, 0x06, 0x41, 0x81, 0xe2, 0x98, 0xd2, 0x30, 0x62, 0xab, 0xc8, 0x17, 0xba, 0x17,
		0x30, 0x23, 0xc8, 0xc0, 0x4c, 0x5c, 0x3a, 0x1e, 0xcb, 0xf4, 0xaf, 0x72, 0x37, 0x2b, 0x38, 0x1f, 0xf6, 0x98, 0x65, 0xc8, 0xf0, 0xe3, 0xc7, 0x0b, 0x93, 0x1c, 0x45, 0xa7, 0x41, 0x9b, 0x3c, 0x44,
		0x18, 0x42, 0xeb, 0xfa, 0xcc, 0x3d, 0x07, 0x0a, 0xc3, 0xb4, 0x33, 0xcd, 0x12, 0x0b, 0x6e, 0x85, 0xb7, 0x2d, 0xad, 0xcf, 0x40, 0xb2, 0x3b, 0x17, 0x3c, 0x34, 0xf6, 0xbe, 0x1b, 0x19, 0x01, 0xf6,
		0x62, 0x1f, 0x14, 0x97, 0xb0, 0x85, 0xcf, 0x8e, 0x99, 0x9d, 0x98, 0x6e, 0xf8, 0xff, 0x3a, 0x88, 0x9a, 0x02, 0x38, 0x97, 0x99, 0x83, 0xa8, 0x68, 0x6f, 0x69, 0xe1, 0x0e, 0xf9, 0x24, 0x9a, 0x87
};

EEPROM_24LC01 eeprom;
uint8_t tempBuf[128];
uint8_t savedData[128];

void runSimpleTest();
void runLargeTest();

void setup() {
	eeprom.begin();
}

void loop() {
	delay(15000);
	runSimpleTest();
	runLargeTest();
}


const char *fishNames[] = {"Aeneus corydoras", "African glass catfish", "African lungfish", "Aholehole",
		"Airbreathing catfish", "Airsac catfish", "Alaska blackfish", "Albacore",
		"Alewife", "Alfonsino", "Algae eater", "Alligatorfish",
		"Alligator gar", "American sole", "Amur pike", "Anchovy"};

typedef struct {
	int a;
	float b;
	bool c;
} SimpleStruct;


void runSimpleTest() {
	// Low-level
	bool bResult;
	uint32_t d1;
	eeprom.readData(0, (uint8_t *)&d1, sizeof(d1));
	Log.trace("d1=%lu", d1);

	d1++;
	bResult = eeprom.writeData(0, (const uint8_t *)&d1, sizeof(d1));
	if (!bResult) {
		Log.error("** %d: call returned false", __LINE__);
	}

	uint32_t d2;
	eeprom.readData(0, (uint8_t *)&d2, sizeof(d2));
	if (!bResult) {
		Log.error("** %d: call returned false", __LINE__);
	}
	if (d1 != d2) {
		Log.error("** %d: %lu != %lu", __LINE__, d1, d2);
	}

	// EEPROM-style API
	// Note that you can substitute EEPROM for the eeprom in the get and put calls and this code will
	// work identically with the EEPROM emulation on the Photon/Electron.
	int addr = 4;
	int intVal;

	// int
	{
		// You can get and put simple values like int, long, bool, etc. using get and put directly

		eeprom.get(addr, intVal);
		Log.trace("addr=%d, intVal=%d, sizeof(int)=%d", addr, intVal, sizeof(int));

		intVal++;
		eeprom.put(addr, intVal);

		int intVal2;
		eeprom.get(addr, intVal2);

		if (intVal != intVal2) {
			Log.error("** %d: %d != %d", __LINE__, intVal, intVal2);
		}


		addr += sizeof(int);
	}
	// double
	{
		double doubleVal;

		// Same for float, double
		eeprom.get(addr, doubleVal);
		Log.trace("addr=%d, doubleVal=%lf, sizeof(doubleVal)=%d", addr, doubleVal, sizeof(doubleVal));

		doubleVal += 0.1;
		eeprom.put(addr, doubleVal);

		double doubleVal2;
		eeprom.get(addr, doubleVal2);

		if (doubleVal != doubleVal2) {
			Log.error("** %d: %lf != %lf", __LINE__, doubleVal, doubleVal2);
		}

		addr += sizeof(doubleVal);
	}

	// Strings are a bit more of a pain because you have to know how much space you want to reserve.
	// In this example, we store a string of up to 15 characters, plus a null byte, in a 16 character buffer
	{
		const int STRING_BUF_SIZE = 16;
		char stringBuf[STRING_BUF_SIZE];

		eeprom.get(addr, stringBuf);
		stringBuf[sizeof(stringBuf) - 1] = 0; // make sure it's null terminated

		// Initialize a String object from the buffer
		String str(stringBuf);

		Log.trace("addr=%d, str=%s, sizeof(stringBuf)=%d", addr, str.c_str(), sizeof(stringBuf));

		str = String(fishNames[intVal & 0xf]);
		Log.trace("next fish name=%s", str.c_str());

		// getBytes handles truncating the string if it's longer than the buffer.
		str.getBytes((unsigned char *)stringBuf, sizeof(stringBuf));
		eeprom.put(addr, stringBuf);

		char stringBuf2[STRING_BUF_SIZE];

		eeprom.get(addr, stringBuf2);
		stringBuf2[sizeof(stringBuf2) - 1] = 0; // make sure it's null terminated

		if (strcmp(stringBuf, stringBuf2) != 0) {
			Log.error("** %d: %s != %s", __LINE__, stringBuf, stringBuf2);
		}

		addr += sizeof(stringBuf);
	}

	// A simple structure
	{
		SimpleStruct data;

		// You can even store a small structure of values
		eeprom.get(addr, data);
		Log.trace("addr=%d, a=%d b=%f c=%d, sizeof(data)=%d", addr, data.a, data.b, data.c, sizeof(data));

		data.a += 2;
		data.b += 0.02;
		data.c = !data.c;

		eeprom.put(addr, data);
		Log.trace("after put addr=%d, a=%d b=%f c=%d, sizeof(data)=%d", addr, data.a, data.b, data.c, sizeof(data));

		SimpleStruct data2;
		eeprom.get(addr, data2);
		Log.trace("after read addr=%d, a=%d b=%f c=%d, sizeof(data)=%d", addr, data2.a, data2.b, data2.c, sizeof(data2));

		if (data.a != data2.a) {
			Log.error("** %d: %d != %d", __LINE__, data.a, data2.a);
		}
		if (data.b != data2.b) {
			Log.error("** %d: %lf != %lf", __LINE__, data.b, data2.b);
		}
		if (data.c != data2.c) {
			Log.error("** %d: %d != %d", __LINE__, data.c, data2.c);
		}


		addr += sizeof(data);
	}
	Log.info("runSimpleTest completed");
}

void runLargeTest() {
	bool bResult;

	bResult = eeprom.readData(0, savedData, sizeof(savedData));
	if (!bResult) {
		Log.error("** %d: failed", __LINE__);
	}


	// Test cross-block write
	bResult = eeprom.writeData(4, randomData, 16);
	if (!bResult) {
		Log.error("** %d: failed", __LINE__);
	}

	bResult = eeprom.readData(4, tempBuf, 16);
	if (!bResult) {
		Log.error("** %d: failed", __LINE__);
	}

	for(size_t ii = 0; ii < 16; ii++) {
		if (randomData[ii] != tempBuf[ii]) {
			Log.error("** %d: failed ii=%u %u != %u", __LINE__, ii, randomData[ii], tempBuf[ii]);
		}
	}

	// Write whole thing
	bResult = eeprom.writeData(0, randomData, sizeof(tempBuf));
	if (!bResult) {
		Log.error("** %d: failed", __LINE__);
	}

	bResult = eeprom.readData(0, tempBuf, sizeof(tempBuf));
	if (!bResult) {
		Log.error("** %d: failed", __LINE__);
	}

	for(size_t ii = 0; ii < sizeof(tempBuf); ii++) {
		if (randomData[ii] != tempBuf[ii]) {
			Log.error("** %d: failed ii=%u %02x != %02x", __LINE__, ii, randomData[ii], tempBuf[ii]);
			break;
		}
	}

	// Erase
	bResult = eeprom.erase();
	if (!bResult) {
		Log.error("** %d: failed", __LINE__);
	}

	bResult = eeprom.readData(0, tempBuf, sizeof(tempBuf));
	if (!bResult) {
		Log.error("** %d: failed", __LINE__);
	}

	for(size_t ii = 0; ii < sizeof(tempBuf); ii++) {
		if (tempBuf[ii] != 0) {
			Log.error("** %d: failed ii=%d %02x != 0", __LINE__, ii, tempBuf[ii]);
			break;
		}
	}

	bResult = eeprom.writeData(0, savedData, sizeof(savedData));
	if (!bResult) {
		Log.error("** %d: failed", __LINE__);
	}

	Log.info("runLargeTest completed");

}

